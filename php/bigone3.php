<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception as Exception; // a common import

class bigone3 extends Exchange {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'bigone3',
            'name' => 'BigONE',
            'countries' => array ( 'GB' ),
            'version' => 'v3',
            'has' => array (
                'cancelAllOrders' => true,
                'createMarketOrder' => false,
                'fetchDepositAddress' => true,
                'fetchMyTrades' => false, // todo support fetchMyTrades
                'fetchOHLCV' => false, // todo support fetchOHLCV
                'fetchOpenOrders' => true,
                'fetchTickers' => true,
                'withdraw' => true,
            ),
            'urls' => array (
                'logo' => 'https://user-images.githubusercontent.com/1294454/42803606-27c2b5ec-89af-11e8-8d15-9c8c245e8b2c.jpg',
                'api' => array (
                    'public' => 'https://big.one/api/v3',
                    'private' => 'https://big.one/api/v3/viewer',
                ),
                'www' => 'https://big.one',
                'doc' => 'https://open.big.one/docs/api.html',
                'fees' => 'https://help.big.one/hc/en-us/articles/115001933374-BigONE-Fee-Policy',
                'referral' => 'https://b1.run/users/new?code=D3LLBVFT',
            ),
            'api' => array (
                'public' => array (
                    'get' => array (
                        'ping',
                        'asset_pairs',
                        'asset_pairs/{symbol}/depth',
                        'asset_pairs/{symbol}/trades',
                        'asset_pairs/{symbol}/ticker',
                        'asset_pairs/{symbol}/candles',
                        'asset_pairs/tickers',
                    ),
                ),
                'private' => array (
                    'get' => array (
                        'accounts',
                        'orders',
                        'orders/{id}',
                        'trades',
                        'withdrawals',
                        'deposits',
                    ),
                    'post' => array (
                        'orders',
                        'orders/{id}/cancel',
                        'orders/cancel',
                    ),
                ),
            ),
            'fees' => array (
                'trading' => array (
                    'maker' => 0.1 / 100,
                    'taker' => 0.1 / 100,
                ),
                'funding' => array (
                    // HARDCODING IS DEPRECATED THE FEES BELOW ARE TO BE REMOVED SOON
                    'withdraw' => array (
                        'BTC' => 0.002,
                        'ETH' => 0.01,
                        'EOS' => 0.01,
                        'ZEC' => 0.002,
                        'LTC' => 0.01,
                        'QTUM' => 0.01,
                        // 'INK' => 0.01 QTUM,
                        // 'BOT' => 0.01 QTUM,
                        'ETC' => 0.01,
                        'GAS' => 0.0,
                        'BTS' => 1.0,
                        'GXS' => 0.1,
                        'BITCNY' => 1.0,
                    ),
                ),
            ),
            'exceptions' => array (
                'codes' => array (
                    '401' => '\\ccxt\\AuthenticationError',
                    '10030' => '\\ccxt\\InvalidNonce', // array("message":"invalid nonce, nonce should be a 19bits number","code":10030)
                ),
                'detail' => array (
                    'Internal server error' => '\\ccxt\\ExchangeNotAvailable',
                ),
            ),
        ));
    }

    public function fetch_markets ($params = array ()) {
        $response = $this->publicGetAssetPairs ($params);
        $markets = $this->safe_value($response, 'data');
        $result = array();
        $this->options['marketsByUuid'] = array();
        for ($i = 0; $i < count ($markets); $i++) {
            //    {
            //        "$id" => "d2185614-50c3-4588-b146-b8afe7534da6",
            //        "quote_scale" => 8,
            //        "quote_asset" => array (
            //          "$id" => "0df9c3c3-255a-46d7-ab82-dedae169fba9",
            //          "$symbol" => "BTC",
            //          "name" => "Bitcoin"
            //        ),
            //        "name" => "BTG-BTC",
            //        "base_scale" => 4,
            //        "min_quote_value":"0.001",
            //        "base_asset" => {
            //          "$id" => "5df3b155-80f5-4f5a-87f6-a92950f0d0ff",
            //          "$symbol" => "BTG",
            //          "name" => "Bitcoin Gold"
            //        }
            //    }
            $market = $markets[$i];
            $id = $this->safe_string($market, 'name');
            $uuid = $this->safe_string($market, 'id');
            $baseAsset = $this->safe_value($market, 'base_asset', array());
            $quoteAsset = $this->safe_value($market, 'quote_asset', array());
            $baseId = $this->safe_string($baseAsset, 'symbol');
            $quoteId = $this->safe_string($quoteAsset, 'symbol');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $precision = array (
                'amount' => $this->safe_integer($market, 'base_scale'),
                'price' => $this->safe_integer($market, 'quote_scale'),
            );
            $entry = array (
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => true,
                'precision' => $precision,
                'limits' => array (
                    'amount' => array (
                        'min' => pow(10, -$precision['amount']),
                        'max' => pow(10, $precision['amount']),
                    ),
                    'price' => array (
                        'min' => pow(10, -$precision['price']),
                        'max' => pow(10, $precision['price']),
                    ),
                    'cost' => array (
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
            $this->options['marketsByUuid'][$uuid] = $entry;
            $result[] = $entry;
        }
        return $result;
    }

    public function parse_ticker ($ticker, $market = null) {
        //    {
        //        "volume" => "190.4925000000000000",
        //        "open" => "0.0777371200000000",
        //        "asset_pair_name" => "ETH-BTC",
        //        "low" => "0.0742925600000000",
        //        "high" => "0.0789150000000000",
        //        "daily_change" => "-0.00029",
        //        "$close" => "0.0774425600000000", //  last price
        //        "$bid" => array (
        //          "price" => "0.0764777900000000",
        //          "order_count" => 4,
        //          "quantity" => "6.4248000000000000"
        //        ),
        //        "$ask" => {
        //          "price" => "0.0774425600000000",
        //          "order_count" => 2,
        //          "quantity" => "1.1741000000000000"
        //        }
        //    }
        if ($market === null) {
            $marketId = $this->safe_string($ticker, 'asset_pair_name');
            if (is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id)) {
                $market = $this->markets_by_id[$marketId];
            }
        }
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $timestamp = $this->milliseconds ();
        $close = $this->safe_float($ticker, 'close');
        $bid = $this->safe_value($ticker, 'bid', array());
        $ask = $this->safe_value($ticker, 'ask', array());
        return array (
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'high' => $this->safe_float($ticker, 'high'),
            'low' => $this->safe_float($ticker, 'low'),
            'bid' => $this->safe_float($bid, 'price'),
            'bidVolume' => $this->safe_float($bid, 'quantity'),
            'ask' => $this->safe_float($ask, 'price'),
            'askVolume' => $this->safe_float($ask, 'quantity'),
            'vwap' => null,
            'open' => $this->safe_float($ticker, 'open'),
            'close' => $close,
            'last' => $close,
            'previousClose' => null,
            'change' => $this->safe_float($ticker, 'daily_change'),
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_float($ticker, 'volume'),
            'quoteVolume' => null,
            'info' => $ticker,
        );
    }

    public function fetch_ticker ($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'symbol' => $market['id'],
        );
        $response = $this->publicGetAssetPairsSymbolTicker (array_merge ($request, $params));
        return $this->parse_ticker($response['data'], $market);
    }

    public function fetch_tickers ($symbols = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        if ($symbols !== null) {
            $ids = $this->market_ids($symbols);
            $request['pair_names'] = implode(',', $ids);
        }
        $response = $this->publicGetAssetPairsTickers (array_merge ($request, $params));
        $tickers = $this->safe_value($response, 'data');
        $result = array();
        for ($i = 0; $i < count ($tickers); $i++) {
            $ticker = $this->parse_ticker($tickers[$i]);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $result;
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->publicGetAssetPairsSymbolDepth (array_merge ($request, $params));
        return $this->parse_order_book($response['data'], null, 'bids', 'asks', 'price', 'quantity');
    }

    public function parse_trade ($trade, $market = null) {
        //    {
        //        "$id" => 38199941,
        //        "$price" => "3378.67",
        //        "$amount" => "0.019812",
        //        "taker_side" => "ASK",
        //        "created_at" => "2019-01-29T06:05:56Z"
        //    }
        $timestamp = $this->parse8601 ($this->safe_string($trade, 'created_at'));
        if ($timestamp === null) {
            // actual time field different from v3 API doc, will be fixed by BigONE soon
            $timestamp = $this->parse8601 ($this->safe_string($trade, 'inserted_at'));
        }
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'amount');
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $cost = null;
        if ($amount !== null) {
            if ($price !== null) {
                $cost = $this->cost_to_precision($symbol, $price * $amount);
            }
        }
        // taker $side is not related to buy/sell $side
        // the following code is probably a mistake
        $side = null;
        if ($trade['taker_side'] === 'ASK') {
            $side = 'sell';
        } else {
            $side = 'buy';
        }
        $id = $this->safe_string($trade, 'id');
        return array (
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'symbol' => $symbol,
            'id' => $id,
            'order' => null,
            'type' => 'limit',
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $price,
            'amount' => $amount,
            'cost' => floatval ($cost),
            'fee' => null,
            'info' => $trade,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'symbol' => $market['id'],
        );
        $response = $this->publicGetAssetPairsSymbolTrades (array_merge ($request, $params));
        //    {
        //        "code" => 0,
        //        "data" => [array (
        //            "id" => 38199941,
        //            "price" => "3378.67",
        //            "amount" => "0.019812",
        //            "taker_side" => "ASK",
        //            "created_at" => "2019-01-29T06:05:56Z"
        //        ), array (
        //            "id" => 38199934,
        //            "price" => "3376.14",
        //            "amount" => "0.019384",
        //            "taker_side" => "ASK",
        //            "created_at" => "2019-01-29T06:05:40Z"
        //        )]
        //    }
        return $this->parse_trades($response['data'], $market, $since, $limit);
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        $response = $this->privateGetAccounts ($params);
        //    array (
        //        {
        //            "asset_symbol" => "BTC",
        //            "$balance" => "0",
        //            "locked_balance" => "0"
        //        }
        //    )
        $result = array( 'info' => $response );
        $balances = $this->safe_value($response, 'data');
        for ($i = 0; $i < count ($balances); $i++) {
            $balance = $balances[$i];
            $symbol = $this->safe_string($balance, 'asset_symbol');
            $code = $this->safe_currency_code($symbol);
            $account = $this->account ();
            $account['total'] = $this->safe_float($balance, 'balance');
            $account['used'] = $this->safe_float($balance, 'locked_balance');
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function parse_order ($order, $market = null) {
        //    {
        //        "$id" => 10,
        //        "asset_pair_name" => "EOS-BTC",
        //        "$price" => "10.00",
        //        "$amount" => "10.00",
        //        "filled_amount" => "9.0",
        //        "avg_deal_price" => "12.0",
        //        "$side" => "ASK",
        //        "state" => "FILLED",
        //        "created_at":"2019-01-29T06:05:56Z",
        //        "updated_at":"2019-01-29T06:05:56Z"
        //    }
        $id = $this->safe_string($order, 'id');
        if ($market === null) {
            $marketId = $this->safe_string($order, 'asset_pair_name');
            if (is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id)) {
                $market = $this->markets_by_id[$marketId];
            }
        }
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $timestamp = $this->parse8601 ($this->safe_string($order, 'created_at'));
        $price = $this->safe_float($order, 'price');
        $amount = $this->safe_float($order, 'amount');
        $filled = $this->safe_float($order, 'filled_amount');
        $remaining = max (0, $amount - $filled);
        $status = $this->parse_order_status($this->safe_string($order, 'state'));
        $side = $this->safe_string($order, 'side');
        if ($side === 'BID') {
            $side = 'buy';
        } else {
            $side = 'sell';
        }
        $cost = null;
        if ($filled !== null) {
            if ($price !== null) {
                $cost = $filled * $price;
            }
        }
        return array (
            'id' => $id,
            'datetime' => $this->iso8601 ($timestamp),
            'timestamp' => $timestamp,
            'status' => $status,
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'price' => $price,
            'cost' => $cost,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'trades' => null,
            'fee' => null,
            'info' => $order,
        );
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $side = ($side === 'buy') ? 'BID' : 'ASK';
        $request = array (
            'asset_pair_name' => $market['id'], // asset pair name BTC-USDT, required
            'side' => $side, // $order $side one of "ASK"/"BID", required
            'amount' => $this->amount_to_precision($symbol, $amount), // $order $amount, string, required
            'price' => $this->price_to_precision($symbol, $price), // $order $price, string, required
        );
        $response = $this->privatePostOrders (array_merge ($request, $params));
        //    {
        //        "id" => 10,
        //        "asset_pair_name" => "EOS-BTC",
        //        "$price" => "10.00",
        //        "$amount" => "10.00",
        //        "filled_amount" => "9.0",
        //        "avg_deal_price" => "12.0",
        //        "$side" => "ASK",
        //        "state" => "FILLED",
        //        "created_at":"2019-01-29T06:05:56Z",
        //        "updated_at":"2019-01-29T06:05:56Z"
        //    }
        $order = $this->safe_value($response, 'data');
        return $this->parse_order($order, $market);
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array( 'id' => $id );
        $response = $this->privatePostOrdersIdCancel (array_merge ($request, $params));
        //    {
        //        "$id" => 10,
        //        "asset_pair_name" => "EOS-BTC",
        //        "price" => "10.00",
        //        "amount" => "10.00",
        //        "filled_amount" => "9.0",
        //        "avg_deal_price" => "12.0",
        //        "side" => "ASK",
        //        "state" => "CANCELLED",
        //        "created_at":"2019-01-29T06:05:56Z",
        //        "updated_at":"2019-01-29T06:05:56Z"
        //    }
        $order = $this->safe_value($response, 'data');
        return $this->parse_order($order);
    }

    public function cancel_all_orders ($symbol = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'asset_pair_name' => $market['id'],
        );
        $response = $this->privatePostOrdersCancel (array_merge ($request, $params));
        //
        //     array (
        //         array (
        //             "id" => 10,
        //             "market_uuid" => "d2185614-50c3-4588-b146-b8afe7534da6",
        //             "price" => "10.00",
        //             "amount" => "10.00",
        //             "filled_amount" => "9.0",
        //             "avg_deal_price" => "12.0",
        //             "side" => "ASK",
        //             "state" => "FILLED"
        //         ),
        //         array (
        //             ...
        //         ),
        //     )
        //
        $result = $this->safe_value($response, 'data');
        $result['info'] = $response;
        return $result;
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array( 'id' => $id );
        $response = $this->privateGetOrdersId (array_merge ($request, $params));
        $order = $this->safe_value($response, 'data');
        return $this->parse_order($order);
    }

    public function fetch_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrders requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        //
        //    Name             Type    Require     Description                                          Example
        //    asset_pair_name  string  true        asset pair Name                                      BTC-USDT
        //    page_token       string  false       $request page after this page token
        //    side             string  false       order side, one of "ASK"/"BID"
        //    state            string  false       order state, one of "CANCELLED"/"FILLED"/"PENDING"
        //    $limit            string  false       default 20; max 200
        //
        $request = array (
            'asset_pair_name' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetOrders (array_merge ($request, $params));
        //    {
        //        "data" => [array (
        //            "id" => 10,
        //            "asset_pair_name" => "ETH-BTC",
        //            "price" => "10.00",
        //            "amount" => "10.00",
        //            "filled_amount" => "9.0",
        //            "avg_deal_price" => "12.0",
        //            "side" => "ASK",
        //            "state" => "FILLED",
        //            "created_at":"2019-01-29T06:05:56Z",
        //            "updated_at":"2019-01-29T06:05:56Z"
        //        )],
        //        "page_token":"dxzef"
        //    }
        $orders = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count ($orders); $i++) {
            $result[] = $this->parse_order($orders[$i], $market);
        }
        return $this->filter_by_symbol_since_limit($result, $symbol, $since, $limit);
    }

    public function parse_order_status ($status) {
        $statuses = array (
            'PENDING' => 'open',
            'FILLED' => 'closed',
            'CANCELLED' => 'canceled',
        );
        return $this->safe_string($statuses, $status);
    }

    public function fetch_open_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $request = array (
            'state' => 'PENDING',
        );
        return $this->fetch_orders($symbol, $since, $limit, array_merge ($request, $params));
    }

    public function fetch_closed_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $request = array (
            'state' => 'FILLED',
        );
        return $this->fetch_orders($symbol, $since, $limit, array_merge ($request, $params));
    }

    public function nonce () {
        return $this->microseconds () * 1000;
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit ($params, $this->extract_params($path));
        $url = $this->urls['api'][$api] . '/' . $this->implode_params($path, $params);
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode ($query);
            }
        } else {
            $this->check_required_credentials();
            $nonce = (string) $this->nonce ();
            $request = array (
                'type' => 'OpenAPIV2',
                'sub' => $this->apiKey,
                'nonce' => $nonce,
            );
            $jwt = $this->jwt ($request, $this->encode ($this->secret));
            $headers = array (
                'Authorization' => 'Bearer ' . $jwt,
            );
            if ($method === 'GET') {
                if ($query) {
                    $url .= '?' . $this->urlencode ($query);
                }
            } else if ($method === 'POST') {
                $headers['Content-Type'] = 'application/json';
                $body = $this->json ($query);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors ($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return; // fallback to default $error handler
        }
        //
        //      array("$errors":array("detail":"Internal server $error"))
        //      array("$errors":[array("message":"invalid nonce, nonce should be a 19bits number","$code":10030)],"$data":null)
        //
        $error = $this->safe_value($response, 'error');
        $errors = $this->safe_value($response, 'errors');
        $data = $this->safe_value($response, 'data');
        if ($error !== null || $errors !== null || $data === null) {
            $feedback = $this->id . ' ' . $this->json ($response);
            $code = null;
            if ($error !== null) {
                $code = $this->safe_integer($error, 'code');
            }
            $exceptions = $this->exceptions['codes'];
            if ($errors !== null) {
                if (gettype ($errors) === 'array' && count (array_filter (array_keys ($errors), 'is_string')) == 0) {
                    $code = $this->safe_string($errors[0], 'code');
                } else {
                    $code = $this->safe_string($errors, 'detail');
                    $exceptions = $this->exceptions['detail'];
                }
            }
            if (is_array($exceptions) && array_key_exists($code, $exceptions)) {
                throw new $exceptions[$code]($feedback);
            } else {
                throw new ExchangeError($feedback);
            }
        }
    }
}
